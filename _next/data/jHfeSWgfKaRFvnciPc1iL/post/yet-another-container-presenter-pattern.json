{"pageProps":{"metadata":{"published":true,"title":"Yet Another Container/Presenter Pattern","blurb":"Use another component layer to transform your data to be rendered easily","layout":"post","date":"Nov 8, 2016"},"content":"\n_These ideas are not just for React, but for simplicity, I will be using React to demonstrate._\n\nI am not going to go over what Smart/Dumb components are, Dan Abramov already did a great job [here](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.nrqfzj2dj).\n\nThese are awesome ideas! And I would like to expand upon it.\n\nBefore I start, let me be clear. This pattern I will be explaining is **NOT** for every little component.\n\nWithout future ado...\n\nIntroduce another level of complexity ðŸ˜„!\n\nYes, it sounds ridiculous, but here is the reason: **Data which is easy to store and update is not always structured in an efficient manner to pass down through components or for the components to use and reduce that data.**\n\nMy proposition is to use a **View Container** in between the Data Store and the Presenter.\n\n![Pattern Flow](https://docs.google.com/drawings/d/1SLtlXyZzw6CukM2CigBJOyMpq9Yny57p9-L7sIonKA0/pub?w=629&h=195)\n\nBy splitting up the way we manage the data and the way we manage the view state we can use better data structures to store, update, and obtain the necessary data to present.\n\nHere are some examples of the same application, but handling data, reducing, and rendering differently.\n\n### First is our monolith. Do everything in one component.\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/fojjyLkk/1/embedded/js,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n### Second is using the plain Container/Presenter pattern.\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/cnmLyqx7/1/embedded/js,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n### Third example shows Data Store/View Container/Presenter pattern.\n\n<iframe width=\"100%\" height=\"300\" src=\"https://jsfiddle.net/d6nc2u9t/embedded/js,result\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\nThe state and action handler in the last example can be extracted out as a Redux Store/Reducer, which would clean up this example even more.\n\nI hope my explanation showed how we can improve the separation of concerns and logic in our applications.\n\n<hr />\n\n## 2019 Update\n\nA much better way to acheive this same pattern is by using a [react-recollect](https://github.com/davidgilbertson/react-recollect) store and transforming your view data with `selectors`.\n","slug":"yet-another-container-presenter-pattern","index":19,"path":"/post/yet-another-container-presenter-pattern"},"__N_SSG":true}