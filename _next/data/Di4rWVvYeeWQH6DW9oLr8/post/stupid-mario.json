{"pageProps":{"metadata":{"published":true,"title":"Stupid Mario","blurb":"Learning neural network algorithms with Mario and emulators","layout":"post","date":"Dec 1, 2014"},"content":"\r\nI have seen a bunch of neural network articles around Hacker News lately. The way I boiled it down was: if you could simplify a problem and solution down to a finite number of inputs and a binary output, you could train a network to solve that problem on its own.\r\n\r\nI used to do a lot of Mario speed runs in high school. I was never any good, but to this day that is the only way I can play Mario now. It has been ingrained into my muscle memory.\r\n\r\nWhat if I taught a neural network how to play Mario?\r\n\r\n**Hypothesis**\r\n\r\nStarting simple. I just want to see if I can train a network to NOT DIE. I will ask the network when to jump throughout the level. After so many experiences dying where he should jump, hopefully he will learn to jump.\r\n\r\n**Setup**\r\n\r\nI used the fantastic [JSNES](https://fir.sh/projects/jsnes/) to facilitate the game itself. I was able to easily grab the data I needed directly from the emulator's memory. I found this great [map](http://datacrystal.romhacking.net/wiki/Super_Mario_Bros.:RAM_map) that made it easy to find the exact variables I used for training and event detection.\r\n\r\nThe next part was the brain itself.\r\n\r\nI tried quite a few big open source neural network Javascript libraries, but due to development issues, I decided to just use a simple perceptron function.\r\n\r\n**Training**\r\n\r\nI wanted to training to be just like a human, visual. So my training input was a normalized frame buffer which I converted to greyscale for ease of use with the perceptron.\r\n\r\nThe output would be if Mario needed to jump right after that frame.\r\n\r\nI simply trained the perceptron by detecting when Mario had died and used the previous buffer.\r\n\r\nAutomating the game play was the trickiest part. I had to detect game overs, collision deaths, and pit fall deaths, and automate Mario's controls.\r\n\r\n**Outcome**\r\n\r\nNo, I do not have a perfect Mario player yet... that is why I titled this post _Stupid_ Mario.\r\n\r\nIt is hard to truly tell if a network is learning until it makes sufficient progress.\r\n\r\n[Try it out!](http://www.richardvanderdys.com/projects/stupid-mario)\r\n\r\n**Future Ideas**\r\n\r\n- Use more events for training\r\n- Save/Load network data\r\n- Use a big name network library\r\n- Other games\r\n","slug":"stupid-mario","index":37,"path":"/post/stupid-mario"},"__N_SSG":true}