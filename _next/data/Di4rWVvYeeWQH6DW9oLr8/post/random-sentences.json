{"pageProps":{"metadata":{"published":true,"title":"Random Sentences","blurb":"Generating study material for language learning","layout":"post","tags":["random","markov"],"date":"Nov 22, 2014"},"content":"\nRecently, I have been trying to learn the Hungarian language. After memorizing a bunch of words, just repeating them to study got boring. I wanted to write a program which randomly created sentences I could use to practice with. Of course, the best practice would be to go find a native speaker near me, but I wanted a challenge...\n\n### Hypothesis\n\nIn order to generate random sentences, I needed some kind of sentence building logic. I have used Markov Chains to build random names in the past, so why would it not work for sentences?\n\n### Data\n\nFirst! I needed data. Thank God for <http://www.gutenberg.org/>. This saved me loads of time finding a bunch of random text.\n\n### Training\n\nThis was a lot of data, so I did not want to load it all in memory at once. Let's use Stream's!\n\nI streamed the huge text data file and counted all the instances of each [bigram](http://en.wikipedia.org/wiki/Bigram) and [trigram](http://en.wikipedia.org/wiki/Trigram). After counting, I sorted each word's adjacent neighbor by the number of instances. This gave me a list of words and their most used adajcent bigram and trigram neighbor.\n\n### Generation\n\nWith this Markov \"link\" data, I was able to generate rudimentary sentences. Nothing made sense, but it was easy to read.\n\nThese sentences are not logical, they are built by choosing what word should statistically come next.\n\n### Ideas for the future:\n\n- Extract/Analyze subject, verb, object in each sentence\n- Use neural networks for training _next_ word\n\n### Code\n\n```js\n//Create Markov links\nfunction createLinks(input, output, n) {\n\tvar links = {};\n\n\tif (!n) {\n\t\tn = 2; // bigram by default\n\t}\n\n\tfunction trainSentence(sentence) {\n\t\tNGrams.ngrams(sentence, n).forEach(function(gram) {\n\t\t\tvar word = gram[0];\n\t\t\tvar neighbor = gram[n - 1];\n\t\t\tif (!links[word]) {\n\t\t\t\tlinks[word] = {};\n\t\t\t}\n\t\t\tif (!links[word][neighbor]) {\n\t\t\t\tlinks[word][neighbor] = 0;\n\t\t\t}\n\t\t\tlinks[word][neighbor]++;\n\t\t});\n\t}\n\n\tfunction read() {\n\t\tvar buffer;\n\t\twhile ((buffer = stream.read())) {\n\t\t\tbuffer\n\t\t\t\t.toLowerCase()\n\t\t\t\t.split(/\\./g)\n\t\t\t\t.forEach(trainSentence);\n\t\t}\n\t}\n\n\tvar stream = fs.createReadStream(input, {\n\t\tencoding: 'utf8'\n\t});\n\n\tstream.on('readable', read);\n\n\tstream.once('end', function() {\n\t\tvar sortedLinks = {};\n\t\tvar keys = Object.keys(links);\n\n\t\tkeys.forEach(function(key) {\n\t\t\tvar words = Object.keys(links[key]);\n\t\t\tsortedLinks[key] = _.sortBy(words, function(word) {\n\t\t\t\treturn links[key][word];\n\t\t\t});\n\t\t});\n\n\t\tfs.writeFile(output, JSON.stringify(sortedLinks, null, '\\t'));\n\t});\n}\n```\n\n```javascript\n//Generate Sentence\nfunction generateSentenceMark2(\n\tbigramInput,\n\ttrigramInput,\n\tlength,\n\tk,\n\tdictionary,\n\tstarter\n) {\n\tvar bigrams = require(bigramInput);\n\tvar trigrams = require(trigramInput);\n\n\tvar current = starter || _.sample(dictionary || Object.keys(bigrams));\n\tvar last;\n\n\tvar sentence = [current];\n\n\tfunction dictionaryContains(word) {\n\t\treturn _.contains(dictionary, word);\n\t}\n\n\tfunction getNeighbor(links, word) {\n\t\tvar neighbors = links[word];\n\t\tif (dictionary) {\n\t\t\tneighbors = neighbors.filter(dictionaryContains);\n\t\t}\n\t\t// neighbors might be null or empty...\n\t\tvar neighbor = neighbors[Math.ceil(neighbors.length * Math.random() * k)];\n\t\t// Go through all of the words if word doesnt have neighbors\n\t\tvar i = 0;\n\t\twhile (!_.has(links, neighbor) && i < neighbors.length) {\n\t\t\tneighbor = neighbors[i++];\n\t\t}\n\t\treturn neighbor;\n\t}\n\n\t// Generate Neighbors\n\t_(length - 1).times(function(i) {\n\t\tvar neighbor =\n\t\t\ti % 2 === 0 ? getNeighbor(bigrams, current) : getNeighbor(trigrams, last);\n\t\tlast = current;\n\t\tcurrent = neighbor;\n\t\tsentence.push(current);\n\t});\n\n\treturn sentence.join(' ');\n}\n```\n","slug":"random-sentences","index":38,"path":"/post/random-sentences"},"__N_SSG":true}