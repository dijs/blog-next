{"pageProps":{"metadata":{"published":true,"title":"Mutation Testing in Javascript","blurb":"Automatically find bugs in your unit tests by slightly mutating your source code","layout":"post","date":"Mar 1, 2015"},"content":"\r\nMutation testing is hard... But totally worth it!\r\n\r\nI recently learned about the concept from a colleague. For those who might not know what it is:\r\n\r\nTesting by mutation calculates the durability of your unit tests against mutated versions of your source code. These mutant versions are designed to be the result of common programming errors. Since there are many different types of errors, this means that normally a large number of mutants are created and tested. These mutants would be extremely difficult to create by hand, so mutants are generally automatically generated from changing the source code using common *error* patterns.\r\n\r\nError pattern examples may include switching conditional, logical, and arithmetic operators. Possibly even changing the value of literals within the code. These are just a few ideas, and I am hoping one day we can have a more *standardized* set of patterns to use.\r\n\r\n### How it works\r\n\r\nA (hopefully obvious) perquisite to mutation testing is that your unit tests need to **pass** against your original source code. Also, the faster your unit tests are, the easier mutation testing will be.\r\n\r\nSo, step by step:\r\n\r\n1. A baseline unit test is run against your original source code\r\n2. Mutated versions of your code (**mutants**) are generated by changing the code slightly\r\n3. Each mutant is ran against the same unit tests\r\n4. If a mutant passes the test suite, it is considered **killed**\r\n5. Your **score** is calculated by how many mutants were killed against how many were created\r\n\r\nThe goal is to try to kill all the mutants.\r\n\r\n### By example...\r\n\r\nHere we have a very simple Javascript module:\r\n\r\n```javascript\r\n//Bank Account Module\r\nmodule.exports = function() {\r\n\tvar balance = 0;\r\n\tthis.getBalance = function() {\r\n\t\treturn balance;\r\n\t};\r\n\tthis.deposit = function(amount) {\r\n\t\tbalance += amount;\r\n\t};\r\n\tthis.withdraw = function(amount) {\r\n\t\tif (balance >= amount) {\r\n\t\t\tbalance -= amount;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n\treturn this;\r\n};\r\n```\r\n\r\nEasy mutation could be to change the balance literal to initialize to -1.\r\n\r\nIf our unit tests started each check with a clean Account instance and assumed that the balance should be 0, our tests would fail.\r\n\r\n```javascript\r\n//Unit Test (Wrong)\r\nit('should deposit', function() {\r\n\taccount.deposit(50);\r\n\taccount.getBalance().should.equal(50);\r\n});\r\n```\r\n\r\nThe corrected unit test might look something like this:\r\n\r\n```javascript\r\n//Unit Test (Corrected)\r\nit('should deposit', function() {\r\n\tvar initial = account.getBalance();\r\n\taccount.deposit(50);\r\n\taccount.getBalance().should.equal(initial + 50);\r\n});\r\n```\r\n\r\nThis is **one** example where mutation testing could help.\r\n\r\n### So I created something\r\n\r\nIn order to better understand and learn about mutation testing, I wanted to write my own Javascript mutation tester. I found one project for mutation testing in Javascript, and although I am normally a fan of \"don't re-invent the wheel\". In this case, the tool was only usable for *grunt* built projects. I wanted to create a more general use tool which was (build system) agnostic.\r\n\r\nBig hurdle I hit with writing this was actually \"node-specifc\" issues. While mutating source code, loading and running tests, I kept getting the same results. After hours of beating my head against the wall, I tried renaming the files before loading them in. Sure enough, it worked. So in doing this project I learned a bit more about how the node.js **require** method works and how it caches files.\r\n\r\n[Here](https://github.com/dijs/profx) is the project.\r\n","slug":"mutation-testing-in-javascript","index":32,"path":"/post/mutation-testing-in-javascript"},"__N_SSG":true}