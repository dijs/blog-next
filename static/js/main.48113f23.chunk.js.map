{"version":3,"sources":["components/ScrollToTop.js","App.js","serviceWorker.js","index.js","posts/index.js"],"names":["ScrollToTop","prevProps","this","props","location","pathname","window","scrollTo","children","React","Component","withRouter","Post","loadable","Promise","all","__webpack_require__","e","then","bind","Home","App","routes","posts","map","post","title","metadata","path","component","react_default","a","createElement","exact","BrowserRouter","components_ScrollToTop","Switch","route","i","Route","Object","assign","key","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","snapSaveState","getState","rootElement","document","getElementById","loadComponents","hydrate","src_App","render","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","parse_md__WEBPACK_IMPORTED_MODULE_0__","parse_md__WEBPACK_IMPORTED_MODULE_0___default","n","slug__WEBPACK_IMPORTED_MODULE_1__","slug__WEBPACK_IMPORTED_MODULE_1___default","date_fns__WEBPACK_IMPORTED_MODULE_2__","date_fns__WEBPACK_IMPORTED_MODULE_2___default","__webpack_exports__","source","metadataParser","filter","_ref","published","date","Date","sort","b","index","blurb","dateFns","format","slug"],"mappings":"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","file":"static/js/main.48113f23.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router';\n\nclass ScrollToTop extends React.Component {\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.location.pathname !== prevProps.location.pathname) {\n\t\t\twindow.scrollTo(0, 0);\n\t\t}\n\t}\n\trender() {\n\t\treturn this.props.children;\n\t}\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport loadable from 'loadable-components';\nimport posts from './posts';\nimport ScrollToTop from './components/ScrollToTop';\n\nconst Post = loadable(() => import('./components/Post'));\nconst Home = loadable(() => import('./components/Home'));\n\nfunction App() {\n  const routes = posts.map(post => {\n    return {\n      title: post.metadata.title,\n      path: post.path,\n      component: () => <Post {...post} />,\n      exact: true\n    };\n  });\n  return (\n    <Router>\n      <ScrollToTop>\n        <Switch>\n          {routes.map((route, i) => (\n            <Route key={i} {...route} />\n          ))}\n          <Route component={Home} />\n        </Switch>\n      </ScrollToTop>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { loadComponents, getState } from 'loadable-components';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nwindow.snapSaveState = () => getState();\n\nconst rootElement = document.getElementById('root');\nloadComponents()\n  .then(() => hydrate(<App />, rootElement))\n  .catch(() => render(<App />, rootElement));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import raw from 'raw.macro';\nimport metadataParser from 'parse-md';\nimport slug from 'slug';\nimport dateFns from 'date-fns';\n\nexport default [\n\traw('github-pages-static-routing.md'),\n\traw('new-blog-2019.md'),\n\traw('loomis-head-study.md'),\n\traw('ares-game-part-1.md'),\n\traw('random-sentences.md'),\n\traw('trees.md'),\n\traw('css-animation.md'),\n\traw('log-with-comments.md'),\n\traw('reading-list.md'),\n\traw('vacbot-part-1.md'),\n\traw('flashcards.md'),\n\traw('mint-fi.md'),\n\traw('self-learning-game-mk1.md'),\n\traw('workflow.md'),\n\traw('functional.md'),\n\traw('mutation-testing-in-javascript.md'),\n\traw('starters.md'),\n\traw('yet-another-container-presenter-pattern.md'),\n\traw('homemade-thing-recognizer.md'),\n\traw('panhandling.md'),\n\traw('stupid-mario.md'),\n\traw('hotspots.md'),\n\traw('parsz.md'),\n\traw('text-analysis-with-react.md'),\n\traw('hue-beats.md'),\n\traw('pivotal-charts.md'),\n\traw('the-middleman.md')\n]\n\t.map(source => metadataParser(source))\n\t.filter(({ metadata: { published } }) => published)\n\t.map(post => {\n\t\tpost.metadata.date = new Date(post.metadata.date);\n\t\treturn post;\n\t})\n\t.sort((a, b) => +b.metadata.date - +a.metadata.date)\n\t.map((post, index) => {\n\t\tif (!post.metadata.blurb) post.metadata.blurb = 'Write something here!';\n\t\tpost.metadata.date = dateFns.format(post.metadata.date, 'MMM D, YYYY');\n\t\tpost.slug = slug(post.metadata.title);\n\t\tpost.index = index;\n\t\tpost.path = `/post/${post.slug}`;\n\t\treturn post;\n\t});\n"],"sourceRoot":""}