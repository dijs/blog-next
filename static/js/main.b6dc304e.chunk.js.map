{"version":3,"sources":["components/ScrollToTop.js","App.js","serviceWorker.js","index.js"],"names":["ScrollToTop","prevProps","this","props","location","pathname","window","scrollTo","children","React","Component","withRouter","Post","loadable","Promise","all","__webpack_require__","e","then","bind","Home","App","routes","posts","map","post","title","metadata","path","component","react_default","a","createElement","exact","BrowserRouter","components_ScrollToTop","Switch","route","i","Route","Object","assign","key","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","snapSaveState","getState","rootElement","document","getElementById","loadComponents","hydrate","src_App","render","hasChildNodes","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8QAGMA,6LACcC,GACdC,KAAKC,MAAMC,SAASC,WAAaJ,EAAUG,SAASC,UACvDC,OAAOC,SAAS,EAAG,oCAIpB,OAAOL,KAAKC,MAAMK,gBAPMC,IAAMC,WAWjBC,cAAWX,GCRpBY,EAAOC,YAAS,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aACtBC,EAAOP,YAAS,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAyBbE,MAvBf,WACE,IAAMC,EAASC,EAAMC,IAAI,SAAAC,GACvB,MAAO,CACLC,MAAOD,EAAKE,SAASD,MACrBE,KAAMH,EAAKG,KACXC,UAAW,kBAAMC,EAAAC,EAAAC,cAACpB,EAASa,IAC3BQ,OAAO,KAGX,OACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACGd,EAAOE,IAAI,SAACa,EAAOC,GAAR,OACVR,EAAAC,EAAAC,cAACO,EAAA,EAADC,OAAAC,OAAA,CAAOC,IAAKJ,GAAOD,MAErBP,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOV,UAAWT,QCbtBuB,EAAcC,QACW,cAA7BtC,OAAOF,SAASyC,UAEe,UAA7BvC,OAAOF,SAASyC,UAEhBvC,OAAOF,SAASyC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT9B,KAAK,SAAAmC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,WCzFjE3D,OAAO4D,cAAgB,kBAAMC,eAE7B,IAAMC,EAAcC,SAASC,eAAe,QAE5CC,cACGrD,KAAK,kBAAMsD,kBAAQ1C,EAAAC,EAAAC,cAACyC,EAAD,MAASL,KAC5BJ,MAAM,kBAAMU,iBAAO5C,EAAAC,EAAAC,cAACyC,EAAD,MAASL,KAE3BA,EAAYO,iBDOT,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,GAAwBvE,OAAOF,SAAS0E,MACpDC,SAAWzE,OAAOF,SAAS2E,OAIvC,OAGFzE,OAAO0E,iBAAiB,OAAQ,WAC9B,IAAMhC,EAAK,GAAAiC,OAAMJ,GAAN,sBAEPlC,GAgEV,SAAiCK,EAAOC,GAEtCiC,MAAMlC,GACH9B,KAAK,SAAAiE,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMvE,KAAK,SAAAmC,GACjCA,EAAaqC,aAAaxE,KAAK,WAC7BZ,OAAOF,SAASuF,aAKpB5C,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA+B,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMvE,KAAK,WACjC0C,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MClC7BE","file":"static/js/main.b6dc304e.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router';\n\nclass ScrollToTop extends React.Component {\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.location.pathname !== prevProps.location.pathname) {\n\t\t\twindow.scrollTo(0, 0);\n\t\t}\n\t}\n\trender() {\n\t\treturn this.props.children;\n\t}\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport loadable from 'loadable-components';\nimport posts from './posts.json';\nimport ScrollToTop from './components/ScrollToTop';\n\nconst Post = loadable(() => import('./components/Post'));\nconst Home = loadable(() => import('./components/Home'));\n\nfunction App() {\n  const routes = posts.map(post => {\n    return {\n      title: post.metadata.title,\n      path: post.path,\n      component: () => <Post {...post} />,\n      exact: true\n    };\n  });\n  return (\n    <Router>\n      <ScrollToTop>\n        <Switch>\n          {routes.map((route, i) => (\n            <Route key={i} {...route} />\n          ))}\n          <Route component={Home} />\n        </Switch>\n      </ScrollToTop>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { loadComponents, getState } from 'loadable-components';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nwindow.snapSaveState = () => getState();\n\nconst rootElement = document.getElementById('root');\n\nloadComponents()\n  .then(() => hydrate(<App />, rootElement))\n  .catch(() => render(<App />, rootElement));\n\nif (rootElement.hasChildNodes()) {\n  serviceWorker.register();\n}\n"],"sourceRoot":""}